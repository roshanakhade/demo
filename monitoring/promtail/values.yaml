COMPUTED VALUES:
affinity: {}
annotations: {}
config:
  clients:
  - url: http://loki:3100/loki/api/v1/push
  enableTracing: false
  enabled: true
  file: |
    server:
      log_level: {{ .Values.config.logLevel }}
      log_format: {{ .Values.config.logFormat }}
      http_listen_port: {{ .Values.config.serverPort }}
      {{- with .Values.httpPathPrefix }}
      http_path_prefix: {{ . }}
      {{- end }}
      {{- tpl .Values.config.snippets.extraServerConfigs . | nindent 2 }}

    clients:
      {{- tpl (toYaml .Values.config.clients) . | nindent 2 }}

    positions:
      {{- tpl (toYaml .Values.config.positions) . | nindent 2 }}

    scrape_configs:
      {{- tpl .Values.config.snippets.scrapeConfigs . | nindent 2 }}
      {{- tpl .Values.config.snippets.extraScrapeConfigs . | nindent 2 }}

    limits_config:
      {{- tpl .Values.config.snippets.extraLimitsConfig . | nindent 2 }}

    tracing:
      enabled: {{ .Values.config.enableTracing }}
  logFormat: logfmt
  logLevel: info
  positions:
    filename: /run/promtail/positions.yaml
  serverPort: 3101
  snippets:
    addScrapeJobLabel: false
    common:
    - action: replace
      source_labels:
      - __meta_kubernetes_pod_node_name
      target_label: node_name
    - action: replace
      source_labels:
      - __meta_kubernetes_namespace
      target_label: namespace
    - action: replace
      replacement: $1
      separator: /
      source_labels:
      - namespace
      - app
      target_label: job
    - action: replace
      source_labels:
      - __meta_kubernetes_pod_name
      target_label: pod
    - action: replace
      source_labels:
      - __meta_kubernetes_pod_container_name
      target_label: container
    - action: replace
      replacement: /var/log/pods/*$1/*.log
      separator: /
      source_labels:
      - __meta_kubernetes_pod_uid
      - __meta_kubernetes_pod_container_name
      target_label: __path__
    - action: replace
      regex: true/(.*)
      replacement: /var/log/pods/*$1/*.log
      separator: /
      source_labels:
      - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
      - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
      - __meta_kubernetes_pod_container_name
      target_label: __path__
    extraLimitsConfig: ""
    extraRelabelConfigs: []
    extraScrapeConfigs: ""
    extraServerConfigs: ""
    pipelineStages:
    - cri: {}
    scrapeConfigs: |
      # See also https://github.com/grafana/loki/blob/master/production/ksonnet/promtail/scrape_config.libsonnet for reference
      - job_name: kubernetes-pods
        pipeline_stages:
          {{- toYaml .Values.config.snippets.pipelineStages | nindent 4 }}
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_pod_controller_name
            regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
            action: replace
            target_label: __tmp_controller_name
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_name
              - __meta_kubernetes_pod_label_app
              - __tmp_controller_name
              - __meta_kubernetes_pod_name
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: app
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_instance
              - __meta_kubernetes_pod_label_instance
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: instance
          - source_labels:
              - __meta_kubernetes_pod_label_app_kubernetes_io_component
              - __meta_kubernetes_pod_label_component
            regex: ^;*([^;]+)(;.*)?$
            action: replace
            target_label: component
          {{- if .Values.config.snippets.addScrapeJobLabel }}
          - replacement: kubernetes-pods
            target_label: scrape_job
          {{- end }}
          {{- toYaml .Values.config.snippets.common | nindent 4 }}
          {{- with .Values.config.snippets.extraRelabelConfigs }}
          {{- toYaml . | nindent 4 }}
          {{- end }}
configmap:
  enabled: false
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
daemonset:
  autoscaling:
    controlledResources: []
    enabled: false
    maxAllowed: {}
    minAllowed: {}
  enabled: true
defaultVolumeMounts:
- mountPath: /run/promtail
  name: run
- mountPath: /var/lib/docker/containers
  name: containers
  readOnly: true
- mountPath: /var/log/pods
  name: pods
  readOnly: true
defaultVolumes:
- hostPath:
    path: /run/promtail
  name: run
- hostPath:
    path: /var/lib/docker/containers
  name: containers
- hostPath:
    path: /var/log/pods
  name: pods
deployment:
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 1
    strategy:
      type: RollingUpdate
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: null
  enabled: false
  replicaCount: 1
enableServiceLinks: true
extraArgs: []
extraContainers: {}
extraEnv: []
extraEnvFrom: []
extraObjects: []
extraPorts: {}
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: null
global:
  imagePullSecrets: []
  imageRegistry: ""
hostAliases: []
hostNetwork: null
httpPathPrefix: ""
image:
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: grafana/promtail
  tag: null
imagePullSecrets: []
initContainer: []
livenessProbe: {}
nameOverride: null
namespace: null
networkPolicy:
  enabled: false
  k8sApi:
    cidrs: []
    port: 8443
  metrics:
    cidrs: []
    namespaceSelector: {}
    podSelector: {}
nodeSelector: {}
podAnnotations: {}
podLabels: {}
podSecurityContext:
  runAsGroup: 0
  runAsUser: 0
podSecurityPolicy:
  allowPrivilegeEscalation: true
  fsGroup:
    rule: RunAsAny
  hostIPC: false
  hostNetwork: false
  hostPID: false
  privileged: true
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - secret
  - hostPath
  - downwardAPI
priorityClassName: null
rbac:
  create: true
  pspEnabled: false
readinessProbe:
  failureThreshold: 5
  httpGet:
    path: '{{ printf `%s/ready` .Values.httpPathPrefix }}'
    port: http-metrics
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1
resources: {}
secret:
  annotations: {}
  labels: {}
serviceAccount:
  annotations: {}
  create: true
  imagePullSecrets: []
  name: null
serviceMonitor:
  annotations: {}
  enabled: false
  interval: null
  labels: {}
  metricRelabelings: []
  namespace: null
  namespaceSelector: {}
  prometheusRule:
    additionalLabels: {}
    enabled: false
    rules: []
  relabelings: []
  scheme: http
  scrapeTimeout: null
  targetLabels: []
  tlsConfig: null
sidecar:
  configReloader:
    config:
      serverPort: 9533
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
    enabled: false
    extraArgs: []
    extraEnv: []
    extraEnvFrom: []
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: jimmidyson/configmap-reload
      tag: v0.8.0
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
    serviceMonitor:
      enabled: true
tolerations:
- effect: NoSchedule
  key: node-role.kubernetes.io/master
  operator: Exists
- effect: NoSchedule
  key: node-role.kubernetes.io/control-plane
  operator: Exists
updateStrategy: {}